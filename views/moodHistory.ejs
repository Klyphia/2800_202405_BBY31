<%- include("templates/header.ejs") %>
<!-- <div class="container my-4" id="calendar-container">
    <h2>Monthly Mood Calendar</h2>
    <div id="calendar" class="calendar">
        <div class="row">
            <div class="col header">Sun</div>
            <div class="col header">Mon</div>
            <div class="col header">Tue</div>
            <div class="col header">Wed</div>
            <div class="col header">Thu</div>
            <div class="col header">Fri</div>
            <div class="col header">Sat</div>
        </div>
        <div id="calendar-days" class="calendar-days"></div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', async function () {
        const calendarDaysContainer = document.getElementById('calendar-days');
        const currentDate = new Date();
        const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
        const lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
        
        // Fetch mood data
        let moodData = [];
        try {
            const response = await fetch('/getMoodData');
            moodData = await response.json();
        } catch (err) {
            console.error('Error fetching mood data:', err);
        }

        // Function to color the date cell based on mood data
        function colorDateCell(date) {
            const dateStr = date.toISOString().split('T')[0];
            const mood = moodData.find(m => new Date(m.timestamp).toISOString().split('T')[0] === dateStr);
            if (mood) {
                return `background-color: ${mood.colour};`;
            }
            return '';
        }

        // Fill in the calendar days
        const daysInWeek = 7;
        const startDay = firstDayOfMonth.getDay();
        
        // Empty cells before the start of the month
        for (let i = 0; i < startDay; i++) {
            const emptyCell = document.createElement('div');
            emptyCell.className = 'col empty';
            calendarDaysContainer.appendChild(emptyCell);
        }

        // Days of the month
        let dayCounter = 1;
        for (let day = 1; day <= lastDayOfMonth.getDate(); day++) {
            const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);
            const dayCell = document.createElement('div');
            dayCell.className = 'col';
            dayCell.innerText = day;
            dayCell.style.cssText = colorDateCell(date);
            calendarDaysContainer.appendChild(dayCell);

            // Start a new row after every 7 days
            if ((day + startDay) % daysInWeek === 0) {
                const newRow = document.createElement('div');
                newRow.className = 'row';
                calendarDaysContainer.appendChild(newRow);
            }
            dayCounter++;
        }

        // Fill in the remaining empty cells
        const remainingEmptyCells = daysInWeek - (dayCounter % daysInWeek);
        for (let i = 0; i < remainingEmptyCells; i++) {
            const emptyCell = document.createElement('div');
            emptyCell.className = 'col empty';
            calendarDaysContainer.appendChild(emptyCell);
        }
    });
</script> -->
<div class="container my-4" id="calendar-container">
    <h2>Monthly Mood Calendar</h2>
    <div id="calendar" class="custom-calendar">
        <div class="custom-row">
            <div class="custom-col custom-header">Sun</div>
            <div class="custom-col custom-header">Mon</div>
            <div class="custom-col custom-header">Tue</div>
            <div class="custom-col custom-header">Wed</div>
            <div class="custom-col custom-header">Thu</div>
            <div class="custom-col custom-header">Fri</div>
            <div class="custom-col custom-header">Sat</div>
        </div>
        <div id="calendar-days" class="custom-calendar-days"></div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', async function () {
        const calendarDaysContainer = document.getElementById('calendar-days');
        const currentDate = new Date();
        const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
        const lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
        
        // Fetch mood data
        let moodData = [];
        try {
            const response = await fetch('/getMoodData');
            moodData = await response.json();
        } catch (err) {
            console.error('Error fetching mood data:', err);
        }

        // Function to color the date cell based on mood data
        function colorDateCell(date) {
            const dateStr = date.toISOString().split('T')[0];
            const mood = moodData.find(m => new Date(m.timestamp).toISOString().split('T')[0] === dateStr);
            if (mood) {
                return `background-color: ${mood.colour};`;
            }
            return '';
        }

        // Fill in the calendar days
        const daysInWeek = 7;
        const startDay = firstDayOfMonth.getDay();
        
        // Empty cells before the start of the month
        for (let i = 0; i < startDay; i++) {
            const emptyCell = document.createElement('div');
            emptyCell.className = 'custom-col custom-empty';
            calendarDaysContainer.appendChild(emptyCell);
        }

        // Days of the month
        let dayCounter = 1;
        for (let day = 1; day <= lastDayOfMonth.getDate(); day++) {
            const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);
            const dayCell = document.createElement('div');
            dayCell.className = 'custom-col';
            dayCell.innerText = day;
            dayCell.style.cssText = colorDateCell(date);
            calendarDaysContainer.appendChild(dayCell);

            // Start a new row after every 7 days
            if ((day + startDay) % daysInWeek === 0) {
                const newRow = document.createElement('div');
                newRow.className = 'custom-row';
                calendarDaysContainer.appendChild(newRow);
            }
            dayCounter++;
        }

        // Fill in the remaining empty cells
        const remainingEmptyCells = daysInWeek - (dayCounter % daysInWeek);
        for (let i = 0; i < remainingEmptyCells; i++) {
            const emptyCell = document.createElement('div');
            emptyCell.className = 'custom-col custom-empty';
            calendarDaysContainer.appendChild(emptyCell);
        }
    });
</script>

<%- include("templates/footer.ejs") %>