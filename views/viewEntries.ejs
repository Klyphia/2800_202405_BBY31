<%- include('templates/header.ejs') %>
    <div class="back-button">
        <a href="/journal">
            <img class="back-image" src="/images/back.png">
        </a>
    </div>
    <div class="entries-welcome">
        <h2
            style="font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif">
            <%= username %>'s Journal Entries
        </h2>
    </div>
    <div class="view-entries-container">
        <div class="viewEntriesRow" id="entriesContainer">
            <!-- Journal entries will be appended here dynamically -->
        </div>
    </div>

    <div class="modal fade" id="editJournalModal" tabindex="-1" role="dialog" aria-labelledby="editJournalModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editJournalModalLabel">Edit Journal Entry</h5>
                    <button type="button" class="close modal-close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <textarea class="form-control" id="editJournalText" rows="10"
                        placeholder="Edit your journal entry here..."></textarea>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary modal-save" id="saveEditBtn">Save</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/js/bootstrap.bundle.min.js"></script>


    <script>
        document.addEventListener('DOMContentLoaded', function () {

            const urlParams = new URLSearchParams(window.location.search);
            const selectedDate = urlParams.get('date');
            if (!selectedDate) {
                fetch('/getJournalEntries')
                    .then(response => response.json())
                    .then(entries => {
                        console.log(entries);

                        entries.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

                        if (entries.length === 0) {
                            // If no entries, display a message
                            const entriesContainer = document.getElementById('entriesContainer');
                            const noEntriesMessage = document.createElement('p');
                            noEntriesMessage.textContent = 'No journal entries found.';
                            entriesContainer.appendChild(noEntriesMessage);
                        } else {
                            // Loop through each journal entry
                            entries.forEach(entry => {
                                // Display each journal entry
                                displayJournalEntry(entries, entry);
                            });
                        }
                    })
                    .catch(err => {
                        console.error('Error fetching journal entries:', err);
                        const entriesContainer = document.getElementById('entriesContainer');
                        const errorMessage = document.createElement('p');
                        errorMessage.textContent = 'An error occurred while fetching journal entries.';
                        entriesContainer.appendChild(errorMessage);
                    });
            } else {
                fetch('/getJournalEntries')
                    .then(response => response.json())
                    .then(entries => {
                        // Filter entries based on selected date
                        const filteredEntries = entries.filter(entry => {
                            const entryDate = new Date(entry.timestamp).toISOString().split('T')[0];
                            return entryDate === selectedDate;
                        });

                        filteredEntries.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

                        filteredEntries.forEach(entry => displayJournalEntry(filteredEntries, entry));
                    })
                    .catch(err => {
                        console.error('Error fetching journal entries:', err);
                        const entriesContainer = document.getElementById('entriesContainer');
                        const errorMessage = document.createElement('p');
                        errorMessage.textContent = 'An error occurred while fetching journal entries.';
                        entriesContainer.appendChild(errorMessage);
                    });
            }
        });

        const editModal = new bootstrap.Modal(document.getElementById('editJournalModal'));
        const editEntryText = document.getElementById('editJournalText');
        const saveEditBtn = document.getElementById('saveEditBtn');
        let currentEditEntry = null;

        document.querySelector('.close').onclick = function () {
            editModal.hide();
        };

        window.onclick = function (event) {
            if (event.target == editModal) {
                editModal.hide();
            }
        };

        function displayJournalEntry(entries, entry) {
            const entriesContainer = document.getElementById('entriesContainer');
            const cardCol = document.createElement('div');
            cardCol.className = 'col-lg-10 mx-auto p-4';

            const card = document.createElement('div');
            card.className = 'card entries-card';
            card.style.height = 'auto';

            const cardBody = document.createElement('div');
            cardBody.className = 'card-body';

            const cardTitle = document.createElement('h5');
            cardTitle.className = 'card-title';
            const entryDate = new Date(entry.timestamp).toLocaleDateString();
            cardTitle.textContent = entryDate;

            const cardText = document.createElement('p');
            cardText.className = 'card-text';
            cardText.textContent = entry.entry;

            const editIcon = document.createElement('i');
            editIcon.className = 'fas fa-edit edit-icon';
            editIcon.addEventListener('click', function () {
                currentEditEntry = entry;
                editEntryText.value = entry.entry;
                editModal.show()
            });

            cardBody.appendChild(cardTitle);
            cardBody.appendChild(cardText);
            card.appendChild(editIcon);
            card.appendChild(cardBody);
            cardCol.appendChild(card);
            entriesContainer.appendChild(cardCol);
        }

        saveEditBtn.addEventListener('click', function () {
            if (currentEditEntry) {
                fetch('/updateJournalEntry', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        timestamp: currentEditEntry.timestamp,
                        entry: editEntryText.value
                    })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            currentEditEntry.entry = editEntryText.value;
                            entriesContainer.innerHTML = '';
                            document.dispatchEvent(new Event('DOMContentLoaded'));
                            editModal.hide();
                        } else {
                            console.error('Error updating journal entry:', data.message);
                        }
                    })
                    .catch(err => {
                        console.error('Error updating journal entry:', err);
                    });
            }
        });
    </script>
    <%- include('templates/footer.ejs') %>